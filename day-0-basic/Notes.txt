Features of Python
    -Free Ware & Open Source
    -High Level Programming Language
        a=10
        b=20
        print(a+b) Anyone Can Easily Understand this Programming 
    -Platform Independent
        PVM for Windows
        PVM for Linux
        PVM for MAC
    -Portability
        Python Application will work on Another Platform with minimal changes 
        or no changes, this migration capiblity is called as Portability.
        ex. program which is designed in Windows Platform work fine in Linux Platform
    -Dynamically Typed 
        No need to declear data type 
        ex. 
        a=10
        b=20
        print(a+b)
        print(type(a))
        print(type(b))
    -Procedure oriented and Object Oriented 
        Python is OOPL, Scripting, Functional 
        Procedure oriented (It focuses on step-by-step instructions to perform tasks.)
    -Interpreated 
        PVM will take care of compilation
        If compilation fails then interpreater raises syntax error
        ex.
        print('Hello'
        It gives syntax error
    -Extensible 
        we can extend python programm functionality by other language code.
        we can use other language code inside python to improve performance
    -Embedded 
        we can used python language code to any oher languageprogramm.
    -Extensive Library Support
        python has rich inbuilt Libraries 
        we are not require to develop these libraries 
        python has batteries called as libraries
    ex:wap to generate 5 digit otp
        from random import randint
        print(randint(0,9),randint(0,9),randint(0,9),randint(0,9),randint(0,9),sep='')
Flavours of Python
    1.cpython
    -It is standard flavour of python to work with c-Applications
    Jython
    -It is for java Application, It can run on JVM
    2.Iron Python
    -It is for C#, .net Applications
    3.PyPy 
    This is 4.4 times faster than cpython
    4.Ruby Python 
    To Work with Rubby Applications
    5.Anaconda Python
    If you want to handle large amount of data like data science
Python Versions 
    Every new version provide support to old version.

Identifires
A name in python program is considered as Identifires may be -
        Variable name
        Method name
        Class name
        Function name
While defining Names in Python we have to follow some rules 
rules -
        1. a to z
        2. A to z
        3. _ (underscore)
        4. $ is not Allowed 
        5. Identifiers should not start with digits
        6. No Legngth limit but not recommanded to take lenthy Identifiers
        7. _x --> Procated Variable
           _x_ --> Private Variable
           __x__ --> Language Level Predefined Name or Magical Names 

Reserved Words:
In any language some Words are reserved to represent some funcanality or meaning
such words are called as Reserved Words.
    ex-
    import keyword
    print(keyword.kwlist)

    Observations-
    Reserved words contains only upper case symbols True, False, None

DATA TYPES: 
    1.Integer:
    how to represent integer datatype
    ex:
    a = 0b1010     # binary
    b = 0o12       # octal
    c = 0xA        # hexadecimal
    print(a, b, c)  # Output: 10 10 10
    print(type(a))  # Output: <class 'int'>

    2. Float 
    how  to represent float datatype
    ex:
    a = float(0b1010)    # binary to float
    b = float(0o12)      # octal to float
    c = float(0xA)       # hex to float
    print(a, b, c)        # Output: 10.0 10.0 10.0
    print(type(a))        # Output: <class 'float'>

    3. Complex 
    how to represent float datatype
    ex:
    a = complex(0b1010, 0b1)     # 10 + 1j
    b = complex(0o12, 0o2)       # 10 + 2j
    c = complex(0xA, 0x3)        # 10 + 3j
    print(a, b, c)  # Output: (10+1j) (10+2j) (10+3j)
    print(type(a))  # Output: <class 'complex'>

    how to obtain real and imaginary values from complex data
    ex:
    a=10+10.5j
    print(a.real)
    print(a.imag)

    4. Bool Data Type
    We can represent bool data type using logical values True, False
    ex:
    x=True
    print(type(x))

    Note:
    True = 1
    True + True = 2
    True + False = 1
    False + True = 1
    True + 10j = 1+ 10j
    True + Truej = INVALID
    True + True(j) = INVALID

    5. string data type
    string means any sequnce of characters 
    s = 'entc'
    s = "entc"
    s = entc --> INVALID

    how to represent multiline string ?
    s = '''entc 
            is 
           branch of engg'''
    
    s = """entc 
            is
           branch of engg"""
    
    Note: Upto three ''' or """ (quotes) it is allowed.

    ex: To Highlite specific word
    s = "my 'name' is ravi"
    print(s) #my name is 'ravi'

    ex: Both single and double quotes (Using escape sequences \)
    s = 'It\'s called "Python" language'
    print(s) # It's called "Python" language

    ex: Using escape sequences (\)
    s = "The book is titled \'Learning Python\'"
    print(s) #The book is titled 'Learning Python'

    ex:
    name = "'ravi'"
    s = f"my name is {name}"
    print(s) # my name is 'ravi'

    #Indexing 
    s = "entc"

     -4  -3  -2  -1
    | e | n | t | c |
      0   1   2   3

    s[0] --> 'e'   s[1] --> 'n'  s[2]--> 't'  s[3]--> 'c'
    s[-1] --> 'c'  s[-2] --> 't'  s[-3] --> 'n'  s[-4]--> 'e'

    How to find last element by -ve index
    print(s[-1])

    How to find last element by +ve index
    print(s[len(s)-1])

    How to find Length of string
    print(len(s))

Type Casting Functions
    from one type to another type conversion
    1. int()
    2. float()
    3. complex()
    4. bool()
    5. str()

    ex.: Type Casting in Python
   
    # 1. int() examples
    print("int() examples:")
    print(int(10.6))        # float to int ‚Üí 10
    print(int("25"))        # str to int ‚Üí 25
    # print(int("25.5"))    # ‚ùå invalid: string float to int (uncomment to see error)
    print()

    # 2. float() examples
    print("float() examples:")
    print(float(10))        # int to float ‚Üí 10.0
    print(float("22.5"))    # str to float ‚Üí 22.5
    print()

    # 3. complex() examples
    print("complex() examples:")
    print(complex(2))             # int to complex ‚Üí (2+0j)
    print(complex(2, 3))          # int, int ‚Üí (2+3j)
    print(complex("4+5j"))        # str to complex ‚Üí (4+5j)
    print()

    # 4. bool() examples
    print("bool() examples:")
    print(bool(0))         # False
    print(bool(1))         # True
    print(bool(""))        # False (empty string)
    print(bool("Hello"))   # True
    print(bool([]))        # False (empty list)
    print(bool([1, 2, 3])) # True (non-empty list)
    print()

    # 5. str() examples
    print("str() examples:")
    print(str(100))        # int to str ‚Üí '100'
    print(str(23.45))      # float to str ‚Üí '23.45'
    print(str(True))       # bool to str ‚Üí 'True'
    print(str(complex(1, 2)))  # complex to str ‚Üí '(1+2j)'
    
    üìå6. Examples of Errors (‚ùå):
    int("12.5")       # ‚ùå Error: can't convert float string to int
    float("abc")      # ‚ùå Error: invalid float string
    int(3+4j)         # ‚ùå Error: complex to int not allowed

Fundamental Data Type Vs Immutability
    All fundamental Data Types are Immutable
    ie once we create object we can't change its contents
    If we Trying to change the content, with those changes a new object is created.

    ex-1:
    x = 1
    print('Referance is ', id(x))
    x = x + 1
    print('Referance is ', id(x))

    ex-2: 
    x=10
    y=x 
    print(id(x))
    print(id(y))

    ex-3:
    x=10
    y=10
    z=10
    print(id(x))
    print(id(y))
    print(id(z))
    
    All pointing to same object that is memory utilization 
    Advantage: Memory Utilization will be imporoved
               performance will be imporoved
    
    Ex: List Data Type Vs Immutability
    l1 = [10,20,30,40]
    l1 = l2
    print(id(l1)) 
    print(id(l2)) 

    Both l1 and l2 shows different Memory Location that means it is mutable in nature

Collection Data Types:
    To hold multiple values the data type which is required is called as collection data
    type. 

    1. list 
    2. Tuple
    3. set
    4. frozenset
    5. dict
    6. bytearry 
    7. range

    1. list:
    If you want to represent group of values as a single entity, where insertion order is 
    preserved & duplicates are allowed.

        Ex:
        l = [10,10.5,'movie',True,10]
        print(l)
        print(type(l))

        In list 
        1. insertion order preserved.
        2. duplicate objects are allowed
        3. hetrogeneous objects are allowed (different datatype)
        4. values should be enclosed in square bracket
        5. index and slices are applicable
        6. list is growable in nature
        ex: 
        l = [10,20,30,40,10,'movie']
        l.append('entc')
        print(l)
    
    2. Tuple:
    It is exactly same as list except it is Immutable.
        1. insertion order is preserved.
        2. Indexing and Slicing Concept is applicable
        3. duplicates are allowed.
        4. hetrogeneous objects are allowed. (different data types)
        5. Immutable (non Changing)
        6. contents are fixed not editable

        ex: 
        t = (10,20,30,40,10,20,'rama')

        #t[0]='movie' #error
        #t.append('entc') #error

        print(t[0]) #Indexing
        print(t[0:4]) # Slicing

        List and Tuple Difference

        List           |            Tuple
        ---------------------------------
        mutable          Immutable
        []                  (), () it is optional  l=1,2,3,'ram','entc'
        More Memory         Less Memory Utilization
        Low performance     High performance
        can change          can't change
        dynamic in nature   static in nature
        growable            non-growable

        ex: 
        t = (10,) #Tuple
        t = 10,   #Tuple
        t = (5)   #it is integer
        t = ,     #syntax error
        t = ()    #empty Tuple
    
    3. Set
        duplicates are not allowed and order is not Important, then we have to go for set
        data type.
        ex:
        s = {1,2,3,4}
        s = {4,3,2,1}
        s = {2,3,1,4}
        s = {3,4,1,2}

        All above above are same set

        s = {'ram','movie',34,'song',45.2,True}
        print(type(s))

        Ex:
        sms sending Application
            some unique no in unique order given by set
            s = {9960084077,8982828290,7020670131,9960084077,8982828290}
            print(s)
            #it is same as 
            s1 = {9960084077,8982828290,7020670131}
            print(s1)
        
        No Slicing and Indexing 
        It is mutable and growable
            ex:
            s2 = {3,2,5}
            print(s2)
            s2.add(7)
            print(s2)
        
        empty set represented as
            s = set()
            s1 = {} # It is empty Dictionary

        List                 |               set
        ----------------------------------------
        duplicates allowed     duplicates not allowed
        order preserved        order not preserved
        Indexing and Slicing   No Indexing and Slicing
        []                     ()

    4. frozenset
        It is exactly same as set except it is Immutable
        ex:
        s = {10,20,30,40}
        fs = frozenset(s)
        print(type(fs)) # class <frozenset>
        #fs.add(40) #Attribute error
    
    5. Dictionary
        list, tuple, set, frozenset can hold individual Values, Dictionary can hold 
        key value pairs. 
        Dictionary can hold key value pairs, like name & roll No
        ex:
        syntax: d = {key1:value1,key2:value2,key3:value3}

        d = {1:'ravi',2:'Neha',3:'Vivek'}
        print(type(d)) #class <dict>

        #how to add data to empty Dictionary | Dictionary is Mutable
        d = {}
        d[1] = 'Ram'
        d[2] = 'sagar'
        d[3] = 'Neha'
        d[4] = 'Vivek'
        d[5] = 'Sachin'
        print(d)
    
        key-value of different data type allowed in Dictionary
        ex:
        my_dict = {
        1: "one",           # int key -> str value
        2.5: 100,           # float key -> int value
        "age": 30,          # str key -> int value
        True: False,        # bool key -> bool value
        None: "empty"       # NoneType key -> str value
        }
        print(my_dict)

        Indexing and Slicing is Not Applicable for Dictionary

        Variables are allowed in Dictionary
        Ex: 
        a = 100
        b = 200
        d = {a:'sachin', b:'Vivek'}
        print(d)

        Duplicate Keys (Not Allowed), if happen 1st value overwritten by last 
        Ex:
        d = {
        "x": 10,
        "y": 20,
        "x": 30  # Duplicate key 'x'; the value 10 will be overwritten by 30
        }
        print(d)

        Duplicate Values (Allowed)
        Ex:
        d = {
        "a": 100,
        "b": 100,  # Same value as key 'a'
        "c": 100   # Same value again
        }
        print(d)
    
    6. Range Data Type
        Range means sequence of values 
        Ex:
        form-1
        ------
        range(n)  --> 0 ... n-1
        range(10) --> 0 1 2 3 4 5 6 7 8 9

        form-2
        ------
        range(begin,end) --> begin ... end-1
        range(10,21)     --> 10 11 12 13 14 15 16 17 18 19 20

        form-3
        ------
        range(begin,end,increment/decremnet) 
                                decremnet -->    if - sign it means end + 1
                                increment -->    if + sign it means end - 1
        range(1,11,2) --> 1 3 5 7 9 
        range(1,11,3) --> 1 4 7 10
        range(20,10,-1) --> 20 19 18 17 16 15 14 13 12 11
        range(20,10) --> No error, but no Output
        r = range(10)
        print(r[0]) --> 0
        print(r[-1]) --> 9

        Indexing & Slicing is Applicable for range.
        print(r[2:6]) --> 
                r = range(10)
                for x in r[2:6]:
                    print(x)
        
    7. Bytes 
        If you want to represent group of values within range of 0 to 255
        ex:
        l = [10,20,30,40,50,60]
        b = bytes(l)
        print(type(b))
        print(b[0])
        print(b[-1])
        b1 = b[1:3]
        for x in b1:
            print(x)
        
        b[0] = 77 --> Not Valid It is Immutable
              TypeError
    
    8. Bytearray
        It is exactly same as bytes, the Difference is bytearry is mutable
        Ex:
        l = [10,20,30,40,50]
        b = bytearray(l)
        print(type(b))
        b[0] = 77
        print(b[0])
        Bytearray is mutable in Nature.
    
    9. None : It is always Immutable
        None means no value associated 
        def f():
            return 10
        r = f()
        print(r) # 10

        def f1():
            print('Hello')
        r1 = f1()
        print(r1) # None
    
    None Only Have One id
    a = None
    b = None
    c = None
    print(id(a),id(b),id(c)) # All Ids are Same

Escape Characters
    The Characters which are associated with some Special meaning 
    \n --> New LINE
    \t --> Horizontal Tab

    ex:
    s = "extc\tbranch"
    print(s)

    \r --> Carriage Return (Means Going to Begining)
    \b --> Previous Characters Delete Automatic 
    \f --> form Feed
    \v --> Vertical Tab
    \' --> single quote
    \" --> Double quote
ex:
# Demonstrating escape sequences in Python

s1 = "Line1\nLine2"                  # \n -> New line
print(s1) #Line1
          #Line2
          
s2 = "extc\tbranch"                 # \t -> Horizontal tab
print(s2) #extc  branch 

s3 = "Hello World\rStart"          # \r -> Carriage return --> Means going to Begining
print(s3) #Start World 

s4 = "Mistake\b\b\bFix"            # \b -> Backspace (deletes 'ake') --> Delete Previous Characters
print(s4) #MistFix

s5 = "Page1\fPage2"                # \f -> Form feed
print(s5) #Page1
          #Page2

s6 = "A\vB\vC"                      # \v -> Vertical tab
print(s6) #A
          #B
          #C

s7 = 'It\'s a book'                # \' -> Single quote
print(s7) #It's a book

s8 = "He said, \"Hello!\""         # \" -> Double quote
print(s8) #He said, "Hello!"

Comments:
single Line Comment
Ex:
# This is a multi-line comment
# written using multiple
# single-line comments

multi Line Comment
Ex:
"""
This is a multi-line comment
written using triple double quotes.
"""

'''
This is another way
to write a multi-line comment
using triple single quotes.
'''

Constant:
    Constant concept is not applicable in Python but it is convension to use upper case latter
    MAX_VALUE = 10

Operators:
    # OPERATORS in Python

a = 10
b = 3

# 1. Arithmetic Operators
print("Arithmetic Operators:")
print("a + b =", a + b)   # Addition -> 13
print("a - b =", a - b)   # Subtraction -> 7
print("a * b =", a * b)   # Multiplication -> 30
print("a / b =", a / b)   # Division -> 3.333...
print("a % b =", a % b)   # Modulus -> 1
print("a ** b =", a ** b) # Exponent -> 1000
print("a // b =", a // b) # Floor Division -> 3
print()

# 2. Relational or Comparison Operators
print("Relational Operators:")
print("a == b:", a == b)  # False
print("a != b:", a != b)  # True
print("a > b:", a > b)    # True
print("a < b:", a < b)    # False
print("a >= b:", a >= b)  # True
print("a <= b:", a <= b)  # False
print()

# 3. Logical Operators
print("Logical Operators:")
x = True
y = False
print("x and y:", x and y)  # False
print("x or y:", x or y)    # True
print("not x:", not x)      # False
print()

# 4. Bitwise Operators
print("Bitwise Operators:")
print("a & b =", a & b)     # Bitwise AND -> 10 & 3 = 2
print("a | b =", a | b)     # Bitwise OR -> 10 | 3 = 11
print("a ^ b =", a ^ b)     # Bitwise XOR -> 10 ^ 3 = 9
print("~a =", ~a)           # Bitwise NOT -> -(a+1) = -11
print("a << 1 =", a << 1)   # Left Shift -> 10 * 2 = 20  # a << b  =  a * (2 ** b)
print("a >> 1 =", a >> 1)   # Right Shift -> 10 // 2 = 5 # a // (2 ** b)
print()

# 5. Assignment Operators
print("Assignment Operators:")
c = 5
c += 2   # c = c + 2 -> 7
print("c += 2:", c)
c *= 3   # c = c * 3 -> 21
print("c *= 3:", c)
c -= 4   # c = c - 4 -> 17
print("c -= 4:", c)
c /= 2   # c = c / 2 -> 8.5
print("c /= 2:", c)
print()

# 6. Special Operators
print("Special Operators:")

# Identity Operators
print("Identity Operators:")
print("a is b:", a is b)       # False
print("a is not b:", a is not b)  # True | is used for referance (Address) Comparison
x=[1,2]
y=[1,2]
print(x is y)

# Membership Operators
print("Membership Operators:")
lst = [1, 2, 3, 10]
print("10 in lst:", 10 in lst)       # True
print("5 not in lst:", 5 not in lst) # True

Use of Operators for Various String Operations:
Ex:

print('entc'+0)
print('entc'+'branch')
print('entc'+' '+'branch')
print('entc'*3)
print('entc'*0) #empty
print('entc'*'branch')
print(14*'ram')
Conclusion: + --> Both Arguments Should be string
            * --> str and Int or Int and str

following Combinations Give Us Zero Division Error:
10/0
10.0/0
10//0
10.0//0
10%0

Comparison based on Unicode Value (ASCII Values)
a-->97          A-->65
b-->98          B-->66
c-->99          C-->67  etc

print("Uppercase Letters (A-Z) and their ASCII values:")
print(ord('A'))

Ex:
print('Amravati'>'amravati')#
print('Badnera'>'badnera')#
print('ramesh'>'Ramesh')#
print('aaa'>'aab')# we compare each latter in this case

Comparing different Data Types
Ex:
print('Engineering'<10) # Error different Types (TypeError)
print(True<4) #
print(10.2<20)

Special Comparison:
print(10<20<30) # first compare 10<20 --> True
                # Second compare 20<30 --> True Ans is True
print(10<20<30<40) # 10<20 --> T, 30<40 --> T | Final Ans is True
print(10<20<30<40>50) # 10<20 --> T, 30<40 --> T, 40>50 --> F | Final Ans False
If all Comparison Retuens True Final Ans is True
If at least 1 Comparison Returns False Final Ans is False

print(10==10.0) #True
print('Engineering' ==10 ) #False, Both are different Data Types
print(10=='10')#f
print(True == 1)
print('True' ==1)

General Observations:
1. Zero considered as False
2. Non Zero considered as a True

AND operator
if x is True then result is y
if x is False then result is x 

print(10 and 20) #20
print(0 and 20) #0
print('entc' and 'branch') #branch
print('' and 'college') #''

OR Operator
if x is True then result is x
if x is False then result is y 

print(10 or 20) #10
print(0 or 20) #20
print('entc' or 'branch') #entc
print('' or 'college') #college

Not Operator
print(not 10) #False
print(not 0) #True
print(not '') #True
print(not 'Engineering') #False

Application of Operator
----------------------------------
Ex-1:
usr = input('Enter User Name ')
pwd = input('Enter Password ')
if usr == 'rama' and pwd == 'entc':
    print('Valid User')
else:
    print('Invalid User')

Ex-2: Read No form Keyboard and Print Minimum Valuen (2 Nos)
a = int(input('Enter 1st No '))
b = int(input('Enter 2nd No '))
min = a if a<b else b
print('Minimum No is', min)


Ex-3: Read No from Keyboard and Print Minimum Value (3 Nos)
a = int(input('Enter 1st No '))
b = int(input('Enter 2nd No '))
min = a if a<b and a<c else b if b<c else c
print('Minimum No is', min)


Pn 109
















    

    
    

















    













